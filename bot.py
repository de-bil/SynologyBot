#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import requests
import logging
from flask import Flask, request, jsonify, render_template
from dotenv import load_dotenv
import ssl
import urllib3
from urllib3.exceptions import InsecureRequestWarning
import re
from typing import Dict, List, Optional, Tuple
import datetime
from pathlib import Path
import random
import difflib
import sqlite3
from collections import defaultdict
import importlib

def format_timedelta(delta):
    total_seconds = int(delta.total_seconds())
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    seconds = total_seconds % 60
    
    if hours > 0:
        return f"{hours}—á {minutes}–º {seconds}—Å"
    elif minutes > 0:
        return f"{minutes}–º {seconds}—Å"
    else:
        return f"{seconds}—Å"
     
# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
urllib3.disable_warnings(InsecureRequestWarning)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class ColorFormatter(logging.Formatter):
    grey = "\x1b[38;21m"
    blue = "\x1b[38;5;39m"
    yellow = "\x1b[38;5;226m"
    red = "\x1b[38;5;196m"
    bold_red = "\x1b[31;1m"
    green = "\x1b[38;5;82m"
    purple = "\x1b[38;5;129m"
    reset = "\x1b[0m"

    def __init__(self, fmt):
        super().__init__(fmt)
        self.fmt = fmt
        self.FORMATS = {
            logging.DEBUG: self.grey + self.fmt + self.reset,
            logging.INFO: self.blue + self.fmt + self.reset,
            logging.WARNING: self.yellow + self.fmt + self.reset,
            logging.ERROR: self.red + self.fmt + self.reset,
            logging.CRITICAL: self.bold_red + self.fmt + self.reset
        }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –§–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–∞–π–ª–∞
    file_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_formatter = ColorFormatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler('synology_bot.log', encoding='utf-8')
    file_handler.setFormatter(file_formatter)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(console_formatter)
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

logger = setup_logging()

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

class UserSession:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    def __init__(self, user_id):
        self.user_id = user_id
        self.state = 'main_menu'  # main_menu, category_selected, question_selected
        self.selected_category = None
        self.selected_question = None
        self.last_interaction = datetime.datetime.now()
    
    def reset(self):
        """–°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        self.state = 'main_menu'
        self.selected_category = None
        self.selected_question = None
        self.last_interaction = datetime.datetime.now()

@app.route('/api/recent-requests', methods=['GET'])
def api_recent_requests():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    stats = bot.stats_db.get_statistics()
    return jsonify({
        'recent_requests': [
            {
                'username': req[0],
                'question': req[1],
                'category': req[2] if req[2] else 'N/A',
                'timestamp': req[3]
            }
            for req in stats['recent_requests']
        ]
    })

@app.route('/api/uptime', methods=['GET'])
def api_uptime():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
    return jsonify({'uptime': format_timedelta(datetime.datetime.now() - start_time)})

@app.route('/api/stats', methods=['GET'])
def api_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = bot.stats_db.get_statistics()
    return jsonify({
        'total_requests': stats['total_requests'],
        'unique_users': stats['unique_users'],
        'uptime': format_timedelta(datetime.datetime.now() - start_time)
    })

@app.route('/api/health', methods=['GET'])
def api_health():
    return jsonify({
        'status': 'active',
        'bot_name': bot.bot_name,
        'port': bot.port,
        'uptime': format_timedelta(datetime.datetime.now() - start_time)
    })     

class StatisticsDB:
    def __init__(self):
        self.db_path = 'bot_statistics.db'
        self.init_db()
    
    def init_db(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                username TEXT,
                question TEXT,
                category TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bot_responses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                request_id INTEGER,
                response_text TEXT,
                category TEXT,
                has_buttons INTEGER DEFAULT 0,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (request_id) REFERENCES user_requests (id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def log_request(self, user_id, username, question, category):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO user_requests (user_id, username, question, category)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, question, category))
        
        request_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        return request_id
    
    def log_response(self, request_id, response_text, category, has_buttons=False):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO bot_responses (request_id, response_text, category, has_buttons)
            VALUES (?, ?, ?, ?)
        ''', (request_id, response_text, category, 1 if has_buttons else 0))
        
        conn.commit()
        conn.close()
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        cursor.execute('SELECT COUNT(*) FROM user_requests')
        total_requests = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cursor.execute('''
            SELECT category, COUNT(*) 
            FROM user_requests 
            WHERE category IS NOT NULL 
            GROUP BY category 
            ORDER BY COUNT(*) DESC
        ''')
        category_stats = cursor.fetchall()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('SELECT COUNT(DISTINCT user_id) FROM user_requests')
        unique_users = cursor.fetchone()[0]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        cursor.execute('''
            SELECT username, question, category, timestamp 
            FROM user_requests 
            ORDER BY timestamp DESC 
            LIMIT 10
        ''')
        recent_requests = cursor.fetchall()
        
        conn.close()
        
        return {
            'total_requests': total_requests,
            'unique_users': unique_users,
            'category_stats': category_stats,
            'recent_requests': recent_requests
        }

class SynologyChatBot:
    def __init__(self):
        # –ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env —Ñ–∞–π–ª–∞
        self.incoming_url = os.getenv('SYNOLOGY_INCOMING_URL', 'https://192-168-10-203.spbuor1.direct.quickconnect.to:5001/webapi/entry.cgi?api=SYNO.Chat.External&method=chatbot&version=2&token=i8ppUgMTrUX7sÊûÅ‰ºöTrUX7s3v9MGBt3RhP6Eoef2Mcs43SdTIX0DV0JG88Qpd6SP6B0esmvRBs')
        self.bot_name = os.getenv('BOT_NAME', '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–ë–æ—Ç')
        self.port = os.getenv('FLASK_PORT', '5000')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_db = StatisticsDB()
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        self.knowledge_base = self._setup_knowledge_base()
        
        logger.info(f"üéØ –ë–æ—Ç '{self.bot_name}' —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üîó –í—Ö–æ–¥—è—â–∏–π URL: {self.incoming_url[:50]}...")

    def _setup_knowledge_base(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            import knowledge_base
            importlib.reload(knowledge_base)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
            logger.info("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ knowledge_base.py")
            return knowledge_base.knowledge_base
        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –±–∞–∑–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            return {
                'dsm': {
                    'name': 'DSM',
                    'keywords': ['dsm', '–¥–∏—Å–∫—Å—Ç—ç–π—à–Ω', '–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],
                    'response': """üñ•Ô∏è **DSM (DiskStation Manager)**""",
                    'questions': [
                        {"question": "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å DSM?", "answer": "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DSM –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üí –°–∏—Å—Ç–µ–º–∞ ‚Üí –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."}
                    ]
                }
            }
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return {}

    def _normalize_text(self, text: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = text.lower()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        text = re.sub(r'[^\w\s]', ' ', text)
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text

    def send_message(self, text: str, user_id: Optional[str] = None, 
                    channel: Optional[str] = None) -> bool:
        
        payload_data = {
            "text": text,
            "user_ids": [user_id] if user_id else [],
            "channel": channel if channel else ""
        }
        
        payload = {
            "payload": json.dumps(payload_data)
        }
        
        try:
            session = requests.Session()
            session.verify = False
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Synology Chat...")
            
            response = session.post(
                self.incoming_url,
                data=payload,
                timeout=30,
                headers={'Content-Type': 'application/x-www-form-urlencoded'}
            )
            
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå HTTP-–æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False

    def _update_request_category(self, request_id: int, category: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.stats_db.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE user_requests 
            SET category = ? 
            WHERE id = ?
        ''', (category, request_id))
        
        conn.commit()
        conn.close()
        logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞ {request_id} –Ω–∞ '{category}'")

    def get_main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        categories = list(self.knowledge_base.keys())
        menu_text = """üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–ë–æ—Ç!** ü§ñ

**–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤–≤–µ–¥—è —Ü–∏—Ñ—Ä—É:**

"""
        for i, category_key in enumerate(categories, 1):
            category = self.knowledge_base[category_key]
            menu_text += f"{i}. üñ•Ô∏è **{category['name']}**\n"
        
        menu_text += "\n**–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5 –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**"
        return menu_text

    def get_category_questions(self, category_key):
        """–ú–µ–Ω—é —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category = self.knowledge_base[category_key]
        questions = category['questions']
        
        menu_text = f"""üìã **–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}**

**–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –≤–≤–µ–¥—è —Ü–∏—Ñ—Ä—É:**

"""
        for i, qa in enumerate(questions, 1):
            menu_text += f"{i}. ‚ùì **{qa['question']}**\n"
        
        menu_text += f"\n**–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ {len(questions)} –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞**\n"
        menu_text += "üìù –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        return menu_text

    def get_question_answer(self, category_key, question_index):
        """–û—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        category = self.knowledge_base[category_key]
        question = category['questions'][question_index]
        
        answer_text = f"""üéØ **–í–æ–ø—Ä–æ—Å:** {question['question']}

üìù **–û—Ç–≤–µ—Ç:** {question['answer']}

üí° *–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤–æ–ø—Ä–æ—Å–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–≤–µ–¥–∏—Ç–µ '–Ω–∞–∑–∞–¥'*
üìã *–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤–≤–µ–¥–∏—Ç–µ '–º–µ–Ω—é'*"""
        return answer_text

    def process_question(self, question: str, user_id: str = None, username: str = None) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–µ–Ω—é"""
        logger.info(f"üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞: '{question}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
        normalized_question = self._normalize_text(question)
        logger.info(f"üìù –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å: '{normalized_question}'")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        request_id = None
        if user_id and username:
            request_id = self.stats_db.log_request(user_id, username, question, None)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_sessions:
            user_sessions[user_id] = UserSession(user_id)
        
        session = user_sessions[user_id]
        session.last_interaction = datetime.datetime.now()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if normalized_question in ['–º–µ–Ω—é', 'menu', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', 'start']:
            session.reset()
            response_text = self.get_main_menu()
            category = 'main_menu'
        
        elif normalized_question == '–Ω–∞–∑–∞–¥':
            if session.state == 'question_selected':
                session.state = 'category_selected'
                response_text = self.get_category_questions(session.selected_category)
                category = session.selected_category
            elif session.state == 'category_selected':
                session.reset()
                response_text = self.get_main_menu()
                category = 'main_menu'
            else:
                session.reset()
                response_text = self.get_main_menu()
                category = 'main_menu'
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–µ—Å—Å–∏–∏
        elif session.state == 'main_menu':
            # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ü–∏—Ñ—Ä–µ
            if normalized_question.isdigit():
                choice = int(normalized_question)
                categories = list(self.knowledge_base.keys())
                
                if 1 <= choice <= len(categories):
                    session.selected_category = categories[choice - 1]
                    session.state = 'category_selected'
                    response_text = self.get_category_questions(session.selected_category)
                    category = session.selected_category
                else:
                    response_text = "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!**\n\n" + self.get_main_menu()
                    category = 'error'
            else:
                response_text = "‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5**\n\n" + self.get_main_menu()
                category = 'error'
        
        elif session.state == 'category_selected':
            # –í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ü–∏—Ñ—Ä–µ
            if normalized_question.isdigit():
                choice = int(normalized_question)
                questions = self.knowledge_base[session.selected_category]['questions']
                
                if 1 <= choice <= len(questions):
                    session.selected_question = choice - 1
                    session.state = 'question_selected'
                    response_text = self.get_question_answer(session.selected_category, session.selected_question)
                    category = session.selected_category
                else:
                    response_text = f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!**\n\n" + self.get_category_questions(session.selected_category)
                    category = 'error'
            else:
                response_text = f"‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ {len(self.knowledge_base[session.selected_category]['questions'])}**\n\n" + self.get_category_questions(session.selected_category)
                category = 'error'
        
        elif session.state == 'question_selected':
            # –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∂–¥–µ–º –∫–æ–º–∞–Ω–¥—ã '–Ω–∞–∑–∞–¥' –∏–ª–∏ '–º–µ–Ω—é'
            response_text = "‚ùå **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n\n" + self.get_question_answer(session.selected_category, session.selected_question)
            category = session.selected_category
        
        else:
            session.reset()
            response_text = self.get_main_menu()
            category = 'main_menu'
        
        if request_id and category != 'error':
            self._update_request_category(request_id, category)
        
        if request_id:
            self.stats_db.log_response(request_id, response_text, category)
        
        return {'text': response_text, 'category': category}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = SynologyChatBot()

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("üåê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ webhook")
        
        data = request.form
        
        if not data:
            logger.error("‚ùå –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return jsonify({"error": "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"}), 400
        
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: {dict(data)}")
        
        message_text = data.get('text', '').strip()
        user_id = data.get('user_id')
        channel = data.get('channel_name')
        username = data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        if not message_text:
            logger.warning("‚ö†Ô∏è –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞")
            return jsonify({"error": "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞"}), 400
        
        logger.info(f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} ({user_id}): '{message_text}'")
        
        response_data = bot.process_question(message_text, user_id, username)
        
        success = bot.send_message(
            response_data['text'], 
            user_id, 
            channel
        )
        
        if success:
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
            return jsonify({
                "status": "success", 
                "message": "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                "category": response_data.get('category', 'unknown')
            })
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"}), 500
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞")
    return render_template('health.html', 
                         bot_name=bot.bot_name,
                         uptime=format_timedelta(datetime.datetime.now() - start_time),
                         port=bot.port,
                         title='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è')

@app.route('/test', methods=['GET'])
def test_bot():
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    return render_template('test.html',
                         bot_name=bot.bot_name,
                         port=bot.port,
                         uptime=format_timedelta(datetime.datetime.now() - start_time),
                         title='–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏')

@app.route('/stats', methods=['GET'])
def statistics():
    logger.info("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞")
    stats = bot.stats_db.get_statistics()
    return render_template('stats.html',
                         stats=stats,
                         bot_name=bot.bot_name,
                         uptime=format_timedelta(datetime.datetime.now() - start_time),
                         title='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')

@app.route('/', methods=['GET'])
def index():
    logger.info("üè† –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    return render_template('index.html',
                         bot_name=bot.bot_name,
                         uptime=format_timedelta(datetime.datetime.now() - start_time),
                         port=bot.port,
                         title='–ì–ª–∞–≤–Ω–∞—è')
                         
@app.route('/send_test', methods=['POST'])
def send_test_message():
    message = request.form.get('message', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    logger.info(f"üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: '{message}'")
    
    success = bot.send_message(f"üéâ **–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n\n{message}")
    
    if success:
        return render_template('test.html',
                             bot_name=bot.bot_name,
                             port=bot.port,
                             uptime=format_timedelta(datetime.datetime.now() - start_time),
                             title='–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏',
                             message="‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        return render_template('test.html',
                             bot_name=bot.bot_name,
                             port=bot.port,
                             uptime=format_timedelta(datetime.datetime.now() - start_time),
                             title='–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏',
                             message="‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                             
@app.route('/api/category-stats', methods=['GET'])
def api_category_stats():
    stats = bot.stats_db.get_statistics()
    return jsonify({
        'category_stats': [
            {
                'category': category,
                'count': count
            }
            for category, count in stats['category_stats']
        ]
    })

templates_dir = os.path.join(os.path.dirname(__file__), 'templates')
os.makedirs(templates_dir, exist_ok=True)

start_time = datetime.datetime.now()

if __name__ == '__main__':
    host = os.getenv('FLASK_HOST', '0.0.0.0')
    port = int(os.getenv('FLASK_PORT', 5000))
    debug = os.getenv('DEBUG_MODE', 'True').lower() == 'true'
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {bot.bot_name} –Ω–∞ {host}:{port}")
    logger.info(f"üåê Webhook –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: http://{host}:{port}/webhook")
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: http://{host}:{port}/health")
    logger.info(f"üß™ –¢–µ—Å—Ç –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏: http://{host}:{port}/test")
    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://{host}:{port}/stats")
    logger.info(f"üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://{host}:{port}/")
    
    try:
        import socket
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        logger.info(f"üåê –õ–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å: http://{local_ip}:{port}")
        logger.info(f"üåê –î–æ—Å—Ç—É–ø —Å –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: http://{local_ip}:{port}")
    except Exception as e:
        logger.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å: {e}")
    

    app.run(host=host, port=port, debug=debug, threaded=True)
